package com.kp.monitor.basis.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kp.monitor.data.po.RecordFile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_FILE".
*/
public class RecordFileDao extends AbstractDao<RecordFile, String> {

    public static final String TABLENAME = "RECORD_FILE";

    /**
     * Properties of entity RecordFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FileId = new Property(0, String.class, "fileId", true, "FILE_ID");
        public final static Property FilePath = new Property(1, String.class, "filePath", false, "FILE_PATH");
        public final static Property StartTime = new Property(2, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, String.class, "endTime", false, "END_TIME");
        public final static Property IsUploadCpmplete = new Property(4, boolean.class, "isUploadCpmplete", false, "IS_UPLOAD_CPMPLETE");
        public final static Property TotalLength = new Property(5, long.class, "totalLength", false, "TOTAL_LENGTH");
        public final static Property HasUploadLength = new Property(6, long.class, "hasUploadLength", false, "HAS_UPLOAD_LENGTH");
        public final static Property RemainUploadLength = new Property(7, long.class, "remainUploadLength", false, "REMAIN_UPLOAD_LENGTH");
        public final static Property Percent = new Property(8, String.class, "percent", false, "PERCENT");
        public final static Property Statue = new Property(9, int.class, "statue", false, "STATUE");
        public final static Property Phone = new Property(10, String.class, "phone", false, "PHONE");
        public final static Property DeviceId = new Property(11, int.class, "deviceId", false, "DEVICE_ID");
        public final static Property Name = new Property(12, String.class, "name", false, "NAME");
        public final static Property NeedUploadStatue = new Property(13, int.class, "needUploadStatue", false, "NEED_UPLOAD_STATUE");
    }


    public RecordFileDao(DaoConfig config) {
        super(config);
    }
    
    public RecordFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_FILE\" (" + //
                "\"FILE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: fileId
                "\"FILE_PATH\" TEXT," + // 1: filePath
                "\"START_TIME\" TEXT," + // 2: startTime
                "\"END_TIME\" TEXT," + // 3: endTime
                "\"IS_UPLOAD_CPMPLETE\" INTEGER NOT NULL ," + // 4: isUploadCpmplete
                "\"TOTAL_LENGTH\" INTEGER NOT NULL ," + // 5: totalLength
                "\"HAS_UPLOAD_LENGTH\" INTEGER NOT NULL ," + // 6: hasUploadLength
                "\"REMAIN_UPLOAD_LENGTH\" INTEGER NOT NULL ," + // 7: remainUploadLength
                "\"PERCENT\" TEXT," + // 8: percent
                "\"STATUE\" INTEGER NOT NULL ," + // 9: statue
                "\"PHONE\" TEXT," + // 10: phone
                "\"DEVICE_ID\" INTEGER NOT NULL ," + // 11: deviceId
                "\"NAME\" TEXT," + // 12: name
                "\"NEED_UPLOAD_STATUE\" INTEGER NOT NULL );"); // 13: needUploadStatue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_FILE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordFile entity) {
        stmt.clearBindings();
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(1, fileId);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(3, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(4, endTime);
        }
        stmt.bindLong(5, entity.getIsUploadCpmplete() ? 1L: 0L);
        stmt.bindLong(6, entity.getTotalLength());
        stmt.bindLong(7, entity.getHasUploadLength());
        stmt.bindLong(8, entity.getRemainUploadLength());
 
        String percent = entity.getPercent();
        if (percent != null) {
            stmt.bindString(9, percent);
        }
        stmt.bindLong(10, entity.getStatue());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
        stmt.bindLong(12, entity.getDeviceId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(13, name);
        }
        stmt.bindLong(14, entity.getNeedUploadStatue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordFile entity) {
        stmt.clearBindings();
 
        String fileId = entity.getFileId();
        if (fileId != null) {
            stmt.bindString(1, fileId);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(2, filePath);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(3, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(4, endTime);
        }
        stmt.bindLong(5, entity.getIsUploadCpmplete() ? 1L: 0L);
        stmt.bindLong(6, entity.getTotalLength());
        stmt.bindLong(7, entity.getHasUploadLength());
        stmt.bindLong(8, entity.getRemainUploadLength());
 
        String percent = entity.getPercent();
        if (percent != null) {
            stmt.bindString(9, percent);
        }
        stmt.bindLong(10, entity.getStatue());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(11, phone);
        }
        stmt.bindLong(12, entity.getDeviceId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(13, name);
        }
        stmt.bindLong(14, entity.getNeedUploadStatue());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public RecordFile readEntity(Cursor cursor, int offset) {
        RecordFile entity = new RecordFile( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // fileId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // filePath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // startTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // endTime
            cursor.getShort(offset + 4) != 0, // isUploadCpmplete
            cursor.getLong(offset + 5), // totalLength
            cursor.getLong(offset + 6), // hasUploadLength
            cursor.getLong(offset + 7), // remainUploadLength
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // percent
            cursor.getInt(offset + 9), // statue
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // phone
            cursor.getInt(offset + 11), // deviceId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // name
            cursor.getInt(offset + 13) // needUploadStatue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordFile entity, int offset) {
        entity.setFileId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFilePath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEndTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsUploadCpmplete(cursor.getShort(offset + 4) != 0);
        entity.setTotalLength(cursor.getLong(offset + 5));
        entity.setHasUploadLength(cursor.getLong(offset + 6));
        entity.setRemainUploadLength(cursor.getLong(offset + 7));
        entity.setPercent(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatue(cursor.getInt(offset + 9));
        entity.setPhone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDeviceId(cursor.getInt(offset + 11));
        entity.setName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNeedUploadStatue(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final String updateKeyAfterInsert(RecordFile entity, long rowId) {
        return entity.getFileId();
    }
    
    @Override
    public String getKey(RecordFile entity) {
        if(entity != null) {
            return entity.getFileId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecordFile entity) {
        return entity.getFileId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
